{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPMpVhdWYB6lkbKkxPpZcSM"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"jX3ZKQ_hLrzV","executionInfo":{"status":"ok","timestamp":1694528763554,"user_tz":180,"elapsed":17,"user":{"displayName":"Bernardo Ávila","userId":"17720466755867390545"}}},"outputs":[],"source":["text = \"\"\"Sed ut perspiciatis unde omnis iste natus error sit\n","voluptatem accusantium doloremque laudantium, totam rem aperiam eaque ipsa,\n","quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt, explicabo.\n","Nemo enim ipsam voluptatem, quia voluptas sit, aspernatur aut odit aut fugit, sed quia\n","consequuntur magni dolores eos, qui ratione voluptatem sequi nesciunt, neque porro quisquam est,\n","qui dolorem ipsum, quia dolor sit, amet, consectetur, adipisci velit, sed quia non numquam eius\n","modi tempora incidunt, ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam,\n","quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi\n","consequatur? Quis autem vel eum iure reprehenderit, qui in ea voluptate velit esse, quam nihil\n","molestiae consequatur, vel illum, qui dolorem eum fugiat, quo voluptas nulla pariatur?\"\"\""]},{"cell_type":"code","source":["upper_text = text.upper()\n","print(upper_text)"],"metadata":{"id":"rsishWipMJds","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1694528763555,"user_tz":180,"elapsed":16,"user":{"displayName":"Bernardo Ávila","userId":"17720466755867390545"}},"outputId":"160f177c-bcac-4a9c-807a-d6025cbca465"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["SED UT PERSPICIATIS UNDE OMNIS ISTE NATUS ERROR SIT\n","VOLUPTATEM ACCUSANTIUM DOLOREMQUE LAUDANTIUM, TOTAM REM APERIAM EAQUE IPSA,\n","QUAE AB ILLO INVENTORE VERITATIS ET QUASI ARCHITECTO BEATAE VITAE DICTA SUNT, EXPLICABO.\n","NEMO ENIM IPSAM VOLUPTATEM, QUIA VOLUPTAS SIT, ASPERNATUR AUT ODIT AUT FUGIT, SED QUIA\n","CONSEQUUNTUR MAGNI DOLORES EOS, QUI RATIONE VOLUPTATEM SEQUI NESCIUNT, NEQUE PORRO QUISQUAM EST,\n","QUI DOLOREM IPSUM, QUIA DOLOR SIT, AMET, CONSECTETUR, ADIPISCI VELIT, SED QUIA NON NUMQUAM EIUS\n","MODI TEMPORA INCIDUNT, UT LABORE ET DOLORE MAGNAM ALIQUAM QUAERAT VOLUPTATEM. UT ENIM AD MINIMA VENIAM,\n","QUIS NOSTRUM EXERCITATIONEM ULLAM CORPORIS SUSCIPIT LABORIOSAM, NISI UT ALIQUID EX EA COMMODI\n","CONSEQUATUR? QUIS AUTEM VEL EUM IURE REPREHENDERIT, QUI IN EA VOLUPTATE VELIT ESSE, QUAM NIHIL\n","MOLESTIAE CONSEQUATUR, VEL ILLUM, QUI DOLOREM EUM FUGIAT, QUO VOLUPTAS NULLA PARIATUR?\n"]}]},{"cell_type":"code","source":["import re\n","\n","clean_text = re.sub(r'[^a-zA-Z]', ' ', upper_text)\n","clean_text = re.sub(r'\\s+', ' ', clean_text)\n","print(clean_text)\n","\n","### OR\n","#\n","P2=\"\"\n","for i in range(len(upper_text)):\n","    if (upper_text[i] >= 'A' and upper_text[i] <= 'Z') or upper_text[i]=='Ç' or upper_text[i]==' ':\n","        P2=P2+upper_text[i]\n","\n","print(P2)"],"metadata":{"id":"xLzKm4WD09UT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1694528763556,"user_tz":180,"elapsed":12,"user":{"displayName":"Bernardo Ávila","userId":"17720466755867390545"}},"outputId":"7608a3db-6808-408b-8d02-720f13edfe5c"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["SED UT PERSPICIATIS UNDE OMNIS ISTE NATUS ERROR SIT VOLUPTATEM ACCUSANTIUM DOLOREMQUE LAUDANTIUM TOTAM REM APERIAM EAQUE IPSA QUAE AB ILLO INVENTORE VERITATIS ET QUASI ARCHITECTO BEATAE VITAE DICTA SUNT EXPLICABO NEMO ENIM IPSAM VOLUPTATEM QUIA VOLUPTAS SIT ASPERNATUR AUT ODIT AUT FUGIT SED QUIA CONSEQUUNTUR MAGNI DOLORES EOS QUI RATIONE VOLUPTATEM SEQUI NESCIUNT NEQUE PORRO QUISQUAM EST QUI DOLOREM IPSUM QUIA DOLOR SIT AMET CONSECTETUR ADIPISCI VELIT SED QUIA NON NUMQUAM EIUS MODI TEMPORA INCIDUNT UT LABORE ET DOLORE MAGNAM ALIQUAM QUAERAT VOLUPTATEM UT ENIM AD MINIMA VENIAM QUIS NOSTRUM EXERCITATIONEM ULLAM CORPORIS SUSCIPIT LABORIOSAM NISI UT ALIQUID EX EA COMMODI CONSEQUATUR QUIS AUTEM VEL EUM IURE REPREHENDERIT QUI IN EA VOLUPTATE VELIT ESSE QUAM NIHIL MOLESTIAE CONSEQUATUR VEL ILLUM QUI DOLOREM EUM FUGIAT QUO VOLUPTAS NULLA PARIATUR \n","SED UT PERSPICIATIS UNDE OMNIS ISTE NATUS ERROR SITVOLUPTATEM ACCUSANTIUM DOLOREMQUE LAUDANTIUM TOTAM REM APERIAM EAQUE IPSAQUAE AB ILLO INVENTORE VERITATIS ET QUASI ARCHITECTO BEATAE VITAE DICTA SUNT EXPLICABONEMO ENIM IPSAM VOLUPTATEM QUIA VOLUPTAS SIT ASPERNATUR AUT ODIT AUT FUGIT SED QUIACONSEQUUNTUR MAGNI DOLORES EOS QUI RATIONE VOLUPTATEM SEQUI NESCIUNT NEQUE PORRO QUISQUAM ESTQUI DOLOREM IPSUM QUIA DOLOR SIT AMET CONSECTETUR ADIPISCI VELIT SED QUIA NON NUMQUAM EIUSMODI TEMPORA INCIDUNT UT LABORE ET DOLORE MAGNAM ALIQUAM QUAERAT VOLUPTATEM UT ENIM AD MINIMA VENIAMQUIS NOSTRUM EXERCITATIONEM ULLAM CORPORIS SUSCIPIT LABORIOSAM NISI UT ALIQUID EX EA COMMODICONSEQUATUR QUIS AUTEM VEL EUM IURE REPREHENDERIT QUI IN EA VOLUPTATE VELIT ESSE QUAM NIHILMOLESTIAE CONSEQUATUR VEL ILLUM QUI DOLOREM EUM FUGIAT QUO VOLUPTAS NULLA PARIATUR\n"]}]},{"cell_type":"code","source":["from collections import Counter\n","\n","count_letters_text = ''.join(filter(str.isalpha, text.lower()))\n","\n","letters_frequency = Counter(count_letters_text)\n","\n","print(letters_frequency)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h5J0fmij4HfZ","executionInfo":{"status":"ok","timestamp":1694528764129,"user_tz":180,"elapsed":580,"user":{"displayName":"Bernardo Ávila","userId":"17720466755867390545"}},"outputId":"a04ef514-0a08-48b9-97fe-3e47fcbfb653"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Counter({'e': 77, 'i': 75, 'u': 70, 'a': 70, 't': 65, 'o': 50, 's': 44, 'm': 43, 'r': 38, 'n': 37, 'l': 33, 'q': 27, 'p': 22, 'd': 20, 'c': 19, 'v': 15, 'b': 5, 'g': 4, 'h': 3, 'x': 3, 'f': 2})\n"]}]},{"cell_type":"code","source":["import math\n","\n","def calculate_entropy(dict):\n","\n","    # calculate probability of each letter\n","    total_letters = sum(dict.values())\n","    probabilities = [count / total_letters for count in dict.values()]\n","\n","    # calculate entropy of the information\n","    entropy = -sum(p * math.log2(p) for p in probabilities)\n","\n","    return entropy\n","\n","resulting_entropy = calculate_entropy(letters_frequency)\n","print(f\"Total entropy of the dictionary information is: {resulting_entropy}\")"],"metadata":{"id":"ikVFAv9J2dM4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1694528764130,"user_tz":180,"elapsed":6,"user":{"displayName":"Bernardo Ávila","userId":"17720466755867390545"}},"outputId":"5a173be6-ccab-47e6-e117-ea20d8648c8b"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Total entropy of the dictionary information is: 3.9598548551236417\n"]}]},{"cell_type":"code","source":["import heapq\n","from collections import defaultdict\n","\n","\n","def build_huffman_tree(text):\n","    # Calculate the frequencies of letters in the text\n","    char_freq = defaultdict(int)\n","    for char in text:\n","        char_freq[char] += 1\n","\n","    # Create a list of nodes for the Huffman tree\n","    heap = [[weight, [char, \"\"]] for char, weight in char_freq.items()]\n","    heapq.heapify(heap)\n","\n","    # Build the Huffman tree\n","    while len(heap) > 1:\n","        lo = heapq.heappop(heap)\n","        hi = heapq.heappop(heap)\n","        for pair in lo[1:]:\n","            pair[1] = '0' + pair[1]\n","        for pair in hi[1:]:\n","            pair[1] = '1' + pair[1]\n","        heapq.heappush(heap, [lo[0] + hi[0]] + lo[1:] + hi[1:])\n","\n","    # Return the dictionary mapping characters to binary codes\n","    huffman_dict = {char: code for char, code in heap[0][1:]}\n","\n","    return huffman_dict\n","\n","\n","# Build the Huffman tree\n","huffman_mapping = build_huffman_tree(text)\n","\n","# Print the mapping of letters to binary codes\n","for char, code in huffman_mapping.items():\n","    print(f\"{char}: {code}\")\n"],"metadata":{"id":"JF37A5QiNcgz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1694528919379,"user_tz":180,"elapsed":493,"user":{"displayName":"Bernardo Ávila","userId":"17720466755867390545"}},"outputId":"cdde8eca-6a3e-484c-bc15-2d5b44d467d3"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["e: 000\n","r: 0010\n","d: 00110\n",",: 00111\n","m: 0100\n","s: 0101\n","p: 01100\n","q: 01101\n","o: 0111\n"," : 100\n","v: 101000\n","x: 10100100\n",".: 101001010\n","?: 101001011\n","N: 1010011000\n","Q: 1010011001\n","S: 1010011010\n","U: 1010011011\n","g: 10100111\n","l: 10101\n","t: 1011\n","u: 1100\n","a: 1101\n","n: 11100\n","\n",": 1110100\n","b: 11101010\n","f: 111010110\n","h: 111010111\n","c: 111011\n","i: 1111\n"]}]},{"cell_type":"code","source":["# Convert the text to binary using the Huffman mapping\n","binary_text = ''.join(huffman_mapping[char] for char in text)\n","\n","# Print the binary representation of the text\n","print(binary_text)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lsttQ7MBzJIM","executionInfo":{"status":"ok","timestamp":1694529003403,"user_tz":180,"elapsed":6,"user":{"displayName":"Bernardo Ávila","userId":"17720466755867390545"}},"outputId":"1bfd1af0-e68e-4024-d878-a282267cbc8e"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","textn"]}]},{"cell_type":"code","source":["# Reverse mapping of Huffman codes (swapping keys and values)\n","reverse_huffman_mapping = {v: k for k, v in huffman_mapping.items()}\n","\n","# Initialize variables\n","decoded_text = \"\"\n","buffer = \"\"\n","\n","# Decode the binary representation\n","for bit in binary_text:\n","    buffer += bit\n","    if buffer in reverse_huffman_mapping:\n","        decoded_text += reverse_huffman_mapping[buffer]\n","        buffer = \"\"\n","\n","# Print the decoded text\n","print(decoded_text)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WG5bpkhU0cqq","executionInfo":{"status":"ok","timestamp":1694529370284,"user_tz":180,"elapsed":408,"user":{"displayName":"Bernardo Ávila","userId":"17720466755867390545"}},"outputId":"952eb19a-9abd-4bbf-85a2-aa2ed9326e48"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Sed ut perspiciatis unde omnis iste natus error sit\n","voluptatem accusantium doloremque laudantium, totam rem aperiam eaque ipsa,\n","quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt, explicabo.\n","Nemo enim ipsam voluptatem, quia voluptas sit, aspernatur aut odit aut fugit, sed quia\n","consequuntur magni dolores eos, qui ratione voluptatem sequi nesciunt, neque porro quisquam est,\n","qui dolorem ipsum, quia dolor sit, amet, consectetur, adipisci velit, sed quia non numquam eius\n","modi tempora incidunt, ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam,\n","quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi\n","consequatur? Quis autem vel eum iure reprehenderit, qui in ea voluptate velit esse, quam nihil\n","molestiae consequatur, vel illum, qui dolorem eum fugiat, quo voluptas nulla pariatur?\n"]}]}]}