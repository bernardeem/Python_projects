{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOvWl6FRjcyS9n+vOOG7L7g"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tZq575JhgERk","executionInfo":{"status":"ok","timestamp":1695834344672,"user_tz":180,"elapsed":569,"user":{"displayName":"Bernardo Ávila","userId":"17720466755867390545"}},"outputId":"a57d56d3-9f89-468b-f642-a3eeecd54305"},"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 3, 1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 3, 1, 3, 2, 1, 1]\n"]}],"source":["import numpy as np\n","\n","# transition matrix for example 1\n","P = np.array([[1/2,   1/4,  1/4],       # sum of every line must be equal to 1\n","               [1/3,   1/3,  1/3],\n","               [1/2,1/2, 0]])\n","cadeia=[]\n","estado=0\n","n=3   # number of states\n","m=20 # chain size\n","cadeia.append(estado) # include initial state\n","for i in range(m):\n","    estado=sum(np.arange(n)*np.random.multinomial(1,P[estado]))\n","    cadeia.append(estado+1)   # include new state in the chain\n","\n","print(cadeia)\n"]},{"cell_type":"code","source":["import numpy as np\n","\n","# initial distribution for the 3 states\n","v0 = np.array([[1/3,1/3,1/3]])\n","\n","# transition matrix\n","P = np.array([[0,   1,  0],\n","               [0,   0,  1],\n","               [1/2,1/2, 0]])\n","\n","v1 = np.matmul(v0,P)\n","print (\"Passo 1: \", v1)\n","v2 = np.matmul(v1,P)\n","print (\"Passo 2: \", v2)\n","v3 = np.matmul(v2,P)\n","print (\"Passo 3: \", v3)\n","v4 = np.matmul(v3,P)\n","print (\"Passo 4: \", v4)\n","v5 = np.matmul(v4,P)\n","print (\"Passo 5: \", v5)\n","v6 = np.matmul(v5,P)\n","print (\"Passo 6: \", v6)\n","v7 = np.matmul(v6,P)\n","print (\"Passo 7: \", v7)\n","v8 = np.matmul(v7,P)\n","print (\"Passo 8: \", v8)\n","v9 = np.matmul(v8,P)\n","print (\"Passo 9: \", v9)\n","v10 = np.matmul(v9,P)\n","print (\"Passo 10: \", v10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TIxAESFPhAMu","executionInfo":{"status":"ok","timestamp":1695836336288,"user_tz":180,"elapsed":406,"user":{"displayName":"Bernardo Ávila","userId":"17720466755867390545"}},"outputId":"9a9cfda9-306b-46fc-8365-ef87e29e342b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Passo 1:  [[0.16666667 0.5        0.33333333]]\n","Passo 2:  [[0.16666667 0.33333333 0.5       ]]\n","Passo 3:  [[0.25       0.41666667 0.33333333]]\n","Passo 4:  [[0.16666667 0.41666667 0.41666667]]\n","Passo 5:  [[0.20833333 0.375      0.41666667]]\n","Passo 6:  [[0.20833333 0.41666667 0.375     ]]\n","Passo 7:  [[0.1875     0.39583333 0.41666667]]\n","Passo 8:  [[0.20833333 0.39583333 0.39583333]]\n","Passo 9:  [[0.19791667 0.40625    0.39583333]]\n","Passo 10:  [[0.19791667 0.39583333 0.40625   ]]\n"]}]},{"cell_type":"code","source":["last_state = None\n","current_state = v0\n","counter = 0\n","\n","while not np.array_equal(last_state, current_state):\n","\n","    counter += 1\n","    next_state = np.matmul(current_state, P)\n","    last_state = current_state\n","    current_state = next_state\n","    print(counter, current_state)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YG8kJl6wsQtt","executionInfo":{"status":"ok","timestamp":1695837048851,"user_tz":180,"elapsed":7,"user":{"displayName":"Bernardo Ávila","userId":"17720466755867390545"}},"outputId":"74dbc3ca-1324-4948-b9f4-4e38f4b6add6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 [[0.16666667 0.5        0.33333333]]\n","2 [[0.16666667 0.33333333 0.5       ]]\n","3 [[0.25       0.41666667 0.33333333]]\n","4 [[0.16666667 0.41666667 0.41666667]]\n","5 [[0.20833333 0.375      0.41666667]]\n","6 [[0.20833333 0.41666667 0.375     ]]\n","7 [[0.1875     0.39583333 0.41666667]]\n","8 [[0.20833333 0.39583333 0.39583333]]\n","9 [[0.19791667 0.40625    0.39583333]]\n","10 [[0.19791667 0.39583333 0.40625   ]]\n","11 [[0.203125   0.40104167 0.39583333]]\n","12 [[0.19791667 0.40104167 0.40104167]]\n","13 [[0.20052083 0.3984375  0.40104167]]\n","14 [[0.20052083 0.40104167 0.3984375 ]]\n","15 [[0.19921875 0.39973958 0.40104167]]\n","16 [[0.20052083 0.39973958 0.39973958]]\n","17 [[0.19986979 0.40039062 0.39973958]]\n","18 [[0.19986979 0.39973958 0.40039062]]\n","19 [[0.20019531 0.4000651  0.39973958]]\n","20 [[0.19986979 0.4000651  0.4000651 ]]\n","21 [[0.20003255 0.39990234 0.4000651 ]]\n","22 [[0.20003255 0.4000651  0.39990234]]\n","23 [[0.19995117 0.39998372 0.4000651 ]]\n","24 [[0.20003255 0.39998372 0.39998372]]\n","25 [[0.19999186 0.40002441 0.39998372]]\n","26 [[0.19999186 0.39998372 0.40002441]]\n","27 [[0.20001221 0.40000407 0.39998372]]\n","28 [[0.19999186 0.40000407 0.40000407]]\n","29 [[0.20000203 0.3999939  0.40000407]]\n","30 [[0.20000203 0.40000407 0.3999939 ]]\n","31 [[0.19999695 0.39999898 0.40000407]]\n","32 [[0.20000203 0.39999898 0.39999898]]\n","33 [[0.19999949 0.40000153 0.39999898]]\n","34 [[0.19999949 0.39999898 0.40000153]]\n","35 [[0.20000076 0.40000025 0.39999898]]\n","36 [[0.19999949 0.40000025 0.40000025]]\n","37 [[0.20000013 0.39999962 0.40000025]]\n","38 [[0.20000013 0.40000025 0.39999962]]\n","39 [[0.19999981 0.39999994 0.40000025]]\n","40 [[0.20000013 0.39999994 0.39999994]]\n","41 [[0.19999997 0.4000001  0.39999994]]\n","42 [[0.19999997 0.39999994 0.4000001 ]]\n","43 [[0.20000005 0.40000002 0.39999994]]\n","44 [[0.19999997 0.40000002 0.40000002]]\n","45 [[0.20000001 0.39999998 0.40000002]]\n","46 [[0.20000001 0.40000002 0.39999998]]\n","47 [[0.19999999 0.4        0.40000002]]\n","48 [[0.20000001 0.4        0.4       ]]\n","49 [[0.2        0.40000001 0.4       ]]\n","50 [[0.2        0.4        0.40000001]]\n","51 [[0.2 0.4 0.4]]\n","52 [[0.2 0.4 0.4]]\n","53 [[0.2 0.4 0.4]]\n","54 [[0.2 0.4 0.4]]\n","55 [[0.2 0.4 0.4]]\n","56 [[0.2 0.4 0.4]]\n","57 [[0.2 0.4 0.4]]\n","58 [[0.2 0.4 0.4]]\n","59 [[0.2 0.4 0.4]]\n","60 [[0.2 0.4 0.4]]\n","61 [[0.2 0.4 0.4]]\n","62 [[0.2 0.4 0.4]]\n","63 [[0.2 0.4 0.4]]\n","64 [[0.2 0.4 0.4]]\n","65 [[0.2 0.4 0.4]]\n","66 [[0.2 0.4 0.4]]\n","67 [[0.2 0.4 0.4]]\n","68 [[0.2 0.4 0.4]]\n","69 [[0.2 0.4 0.4]]\n","70 [[0.2 0.4 0.4]]\n","71 [[0.2 0.4 0.4]]\n","72 [[0.2 0.4 0.4]]\n","73 [[0.2 0.4 0.4]]\n","74 [[0.2 0.4 0.4]]\n","75 [[0.2 0.4 0.4]]\n","76 [[0.2 0.4 0.4]]\n","77 [[0.2 0.4 0.4]]\n","78 [[0.2 0.4 0.4]]\n","79 [[0.2 0.4 0.4]]\n","80 [[0.2 0.4 0.4]]\n","81 [[0.2 0.4 0.4]]\n","82 [[0.2 0.4 0.4]]\n","83 [[0.2 0.4 0.4]]\n","84 [[0.2 0.4 0.4]]\n","85 [[0.2 0.4 0.4]]\n","86 [[0.2 0.4 0.4]]\n","87 [[0.2 0.4 0.4]]\n","88 [[0.2 0.4 0.4]]\n","89 [[0.2 0.4 0.4]]\n","90 [[0.2 0.4 0.4]]\n","91 [[0.2 0.4 0.4]]\n","92 [[0.2 0.4 0.4]]\n","93 [[0.2 0.4 0.4]]\n","94 [[0.2 0.4 0.4]]\n","95 [[0.2 0.4 0.4]]\n","96 [[0.2 0.4 0.4]]\n","97 [[0.2 0.4 0.4]]\n","98 [[0.2 0.4 0.4]]\n","99 [[0.2 0.4 0.4]]\n","100 [[0.2 0.4 0.4]]\n","101 [[0.2 0.4 0.4]]\n","102 [[0.2 0.4 0.4]]\n","103 [[0.2 0.4 0.4]]\n","104 [[0.2 0.4 0.4]]\n","105 [[0.2 0.4 0.4]]\n","106 [[0.2 0.4 0.4]]\n","107 [[0.2 0.4 0.4]]\n","108 [[0.2 0.4 0.4]]\n","109 [[0.2 0.4 0.4]]\n","110 [[0.2 0.4 0.4]]\n"]}]}]}